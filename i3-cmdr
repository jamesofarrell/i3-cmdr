#!/usr/bin/env python3

import i3ipc
from time import sleep
from sys import argv

# Create the Connection object that can be used to send commands and subscribe
# to events.
i3 = i3ipc.Connection()

tree = i3.get_tree()

def get_active_workspace():
    workspaces = i3.get_workspaces()
    for w in workspaces:
        if w.focused:
            return get_workspace_by_name(w.name)

def get_workspace_by_num(num):
    for output in tree.nodes:
        for workspace in output.nodes[1].nodes:
            if workspace.num == num:
                return workspace

def get_workspace_by_name(name):
    for output in tree.nodes:
        #print(output.name)
        if output.name != '__i3':
            for workspace in output.nodes[1].nodes:
                if workspace.name == name:
                    return workspace

def get_tiled_window_count(workspace):
    return (len(workspace.leaves()) - get_floating_window_count(workspace))

def get_floating_window_count(workspace):
    return len(workspace.floating_nodes)

def debug_command(cmd,slow):
    cmds = cmd.split(';')
    for c in cmds:
        print(i3.command(c))
        speed = (slow / 1000)
        sleep(speed)

def float_all(workspace):
    #code for shuffle
    tiled_count = get_tiled_window_count(workspace)

    cmd = 'focus tiling; floating toggle;' * (tiled_count)
    print("float: {0}".format(cmd))
    return(cmd)

def dwindle(workspace,mode,weight='r',slow=0):
    #code for shuffle
    floating_count = get_floating_window_count(workspace) #this is stupid, fix it
    tiled_count = get_tiled_window_count(workspace)
    window_count = floating_count + tiled_count

    #float all windows!
    cmd = float_all(workspace)
    
    #which direction?
    movement_h = "right"
    if weight == 'l':
        movement_h = "left"

    movement_v = "up"
    if weight == 'd':
        movement_v = 'down'

    #which mode?
    flip = True
    if mode == 'v':
        flip = False
    if window_count > 0:
        if tiled_count == 0:
            cmd += 'focus right;'
        cmd += 'floating toggle;'
        if floating_count > 0:
            cmd += 'focus right;' * floating_count
        if window_count > 1:
            cmd += 'focus parent;'

        if window_count % 2 == 1:
            flip = not flip
        for x in range(1,window_count):
            #move = 'left'
            move = movement_h
            if not flip:
                    move = movement_v
            cmd += 'focus floating;'
            if x < (floating_count + 1):
                cmd += 'focus right;'
            cmd += 'floating toggle; move {0}; move {0};'.format(move)
            flip = not flip
            
    return(cmd)

argv_len = len(argv)

active_workspace = get_active_workspace();
cmd = ""


slow=0
try:
    slow = int(argv[-1])
except:
    slow = 0

if argv[1].lower() == 'dwindle':
    mode = 'h'
    weight = 'r'
    if argv_len > 2 and argv[2].lower() == 'v':
        mode = 'v'
        weight = 'u'

    if argv_len > 3:
        if mode == 'h' and argv[3].lower() == 'l':
            weight = 'l'
        if mode == 'v' and argv[3].lower() == 'd':
            weight = 'd'

    cmd += dwindle(active_workspace,mode,weight=weight,slow=slow)
elif argv[1].lower() == 'float':
    cmd += float_all(active_workspace)

if cmd == "":
    print("i3-cmdr [dwindle (h r|l) | (v u|d)]")
    print("i3-cmdr [float]")
    exit()

cmd = 'workspace number {0};'.format(active_workspace.num) + cmd
if (slow > 0):
    print(cmd)
    debug_command(cmd,slow)
else:
    i3.command(cmd)

#dwindle(get_active_workspace(),'v')
